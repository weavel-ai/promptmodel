"""project_uuid_convert_string

Revision ID: 7df7a25380bc
Revises: dfcc59a1a1bd
Create Date: 2024-01-18 20:06:14.619277

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '7df7a25380bc'
down_revision: Union[str, None] = 'dfcc59a1a1bd'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # view delete
    op.execute("DROP VIEW IF EXISTS chat_log_view")
    op.execute("DROP VIEW IF EXISTS chat_logs_count")
    op.execute("DROP VIEW IF EXISTS run_logs_count")
    op.execute("DROP VIEW IF EXISTS project_daily_run_log_metric")
    op.execute("DROP VIEW IF EXISTS deployment_run_log_view")
    op.execute("DROP VIEW IF EXISTS daily_chat_log_metric")
    
    op.drop_constraint('chat_log_project_uuid_fkey', 'chat_log', type_='foreignkey')
    op.alter_column('chat_log', 'project_uuid',
               existing_type=sa.UUID(),
               type_=sa.Text(),
               existing_nullable=False)
    op.drop_constraint('chat_model_project_uuid_fkey', 'chat_model', type_='foreignkey')
    op.alter_column('chat_model', 'project_uuid',
               existing_type=sa.UUID(),
               type_=sa.Text(),
               existing_nullable=False)
    op.drop_constraint('dataset_project_uuid_fkey', 'dataset', type_='foreignkey')
    op.alter_column('dataset', 'project_uuid',
               existing_type=sa.UUID(),
               type_=sa.Text(),
               existing_nullable=True)
    op.drop_constraint('eval_metric_project_uuid_fkey', 'eval_metric', type_='foreignkey')
    op.alter_column('eval_metric', 'project_uuid',
               existing_type=sa.UUID(),
               type_=sa.Text(),
               existing_nullable=False)
    op.drop_constraint('function_model_project_uuid_fkey', 'function_model', type_='foreignkey')
    op.alter_column('function_model', 'project_uuid',
               existing_type=sa.UUID(),
               type_=sa.Text(),
               existing_nullable=False)
    op.drop_constraint('function_schema_project_uuid_fkey', 'function_schema', type_='foreignkey')
    op.alter_column('function_schema', 'project_uuid',
               existing_type=sa.UUID(),
               type_=sa.Text(),
               existing_nullable=False)
    op.drop_constraint('llm_project_uuid_fkey', 'llm', type_='foreignkey')
    op.alter_column('llm', 'project_uuid',
               existing_type=sa.UUID(),
               type_=sa.Text(),
               existing_nullable=True)
    op.drop_constraint('project_changelog_project_uuid_fkey', 'project_changelog', type_='foreignkey')
    op.alter_column('project_changelog', 'project_uuid',
               existing_type=sa.UUID(),
               type_=sa.Text(),
               existing_nullable=False)
    op.drop_constraint('run_log_project_uuid_fkey', 'run_log', type_='foreignkey')
    op.alter_column('run_log', 'project_uuid',
               existing_type=sa.UUID(),
               type_=sa.Text(),
               existing_nullable=False)
    op.drop_constraint('sample_input_project_uuid_fkey', 'sample_input', type_='foreignkey')
    op.alter_column('sample_input', 'project_uuid',
               existing_type=sa.UUID(),
               type_=sa.Text(),
               existing_nullable=False)
    op.drop_constraint('tag_project_uuid_fkey', 'tag', type_='foreignkey')
    op.alter_column('tag', 'project_uuid',
               existing_type=sa.UUID(),
               type_=sa.Text(),
               existing_nullable=True)
    op.drop_constraint('unit_project_uuid_fkey', 'unit', type_='foreignkey')
    op.alter_column('unit', 'project_uuid',
               existing_type=sa.UUID(),
               type_=sa.Text(),
               existing_nullable=False)

    op.alter_column('project', 'uuid',
               existing_type=sa.UUID(),
               type_=sa.Text(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    
    op.create_foreign_key('unit_project_uuid_fkey', 'unit', 'project', ['project_uuid'], ['uuid'])
    op.create_foreign_key('tag_project_uuid_fkey', 'tag', 'project', ['project_uuid'], ['uuid'])
    op.create_foreign_key('sample_input_project_uuid_fkey', 'sample_input', 'project', ['project_uuid'], ['uuid'])
    op.create_foreign_key('run_log_project_uuid_fkey', 'run_log', 'project', ['project_uuid'], ['uuid'])
    op.create_foreign_key('project_changelog_project_uuid_fkey', 'project_changelog', 'project', ['project_uuid'], ['uuid'])
    op.create_foreign_key('llm_project_uuid_fkey', 'llm', 'project', ['project_uuid'], ['uuid'])
    op.create_foreign_key('function_schema_project_uuid_fkey', 'function_schema', 'project', ['project_uuid'], ['uuid'])
    op.create_foreign_key('function_model_project_uuid_fkey', 'function_model', 'project', ['project_uuid'], ['uuid'])
    op.create_foreign_key('eval_metric_project_uuid_fkey', 'eval_metric', 'project', ['project_uuid'], ['uuid'])
    op.create_foreign_key('dataset_project_uuid_fkey', 'dataset', 'project', ['project_uuid'], ['uuid'])
    op.create_foreign_key('chat_model_project_uuid_fkey', 'chat_model', 'project', ['project_uuid'], ['uuid'])
    op.create_foreign_key('chat_log_project_uuid_fkey', 'chat_log', 'project', ['project_uuid'], ['uuid'])
    
    # view create
    op.execute(
        """create view
  public.chat_log_view as
select
  cl.project_uuid,
  cm.name as chat_model_name,
  cm.uuid as chat_model_uuid,
  cv.uuid as chat_model_version_uuid,
  cv.version as chat_model_version,
  um.created_at,
  um.session_uuid,
  cl.assistant_message_uuid,
  um.content as user_input,
  am.content as assistant_output,
  am.tool_calls,
  am.function_call,
  cl.prompt_tokens,
  cl.completion_tokens,
  cl.total_tokens,
  cl.latency,
  cl.cost,
  session.run_from_deployment
from
  chat_log cl
  left join chat_message um on cl.user_message_uuid = um.uuid
  left join chat_message am on cl.assistant_message_uuid = am.uuid
  join chat_session session on um.session_uuid = session.uuid
  join chat_model_version cv on session.version_uuid = cv.uuid
  join chat_model cm on cv.chat_model_uuid = cm.uuid;"""
    )
    op.execute(
        """create view
  public.chat_logs_count as
select
  p.uuid as project_uuid,
  count(cl.project_uuid) as chat_logs_count
from
  project p
  left join chat_log cl on p.uuid = cl.project_uuid
group by
  p.uuid;"""
    )
    op.execute(
        """create view
  public.run_logs_count as
select
  p.uuid as project_uuid,
  count(rl.version_uuid) as run_logs_count
from
  project p
  left join function_model pm on p.uuid = pm.project_uuid
  left join function_model_version pmv on pm.uuid = pmv.function_model_uuid
  left join run_log rl on pmv.uuid = rl.version_uuid
group by
  p.uuid;"""
    )
    op.execute(
        """create view
  public.project_daily_run_log_metric as
SELECT project_uuid,
  sum(cost::numeric) as total_cost,
  sum(latency) / count(*)::double precision / 1000::double precision as avg_latency,
  sum(total_tokens) as total_token_usage,
  count(*) as total_runs,
  date(created_at) as day,
  run_from_deployment
FROM run_log rl
GROUP BY run_from_deployment, (date(created_at)), project_uuid"""
    )
    op.execute(
        """create view
  public.deployment_run_log_view as
select
  FM.project_uuid,
  FM.name as function_model_name,
  FM.uuid as function_model_uuid,
  FMV.version as function_model_version,
  FMV.uuid as function_model_version_uuid,
  rl.uuid as run_log_uuid,
  rl.created_at,
  rl.inputs,
  rl.raw_output,
  rl.parsed_outputs,
  rl.run_from_deployment,
  rl.prompt_tokens,
  rl.completion_tokens,
  rl.total_tokens,
  rl.latency,
  rl.cost,
  rl.run_log_metadata,
  rl.function_call,
  rl.tool_calls
from
  run_log rl
  left join function_model_version FMV on FMV.uuid = rl.version_uuid
  left join function_model FM on FM.uuid = FMV.function_model_uuid
order by
  rl.created_at desc;"""
    )
    op.execute(
        """create view
  public.daily_chat_log_metric as
select
  p.name as project_name,
  cm.name as chat_model_name,
  cm.uuid as chat_model_uuid,
  date (cs.created_at) as day,
  sum(cl.cost::numeric) as total_cost,
  sum(cl.latency) / count(cl.*)::double precision / 1000::double precision as avg_latency,
  sum(cl.total_tokens) as total_token_usage,
  count(cs.*) as total_chat_sessions
from
  project p
  left join chat_model cm on cm.project_uuid = p.uuid
  left join chat_model_version v on v.chat_model_uuid = cm.uuid
  left join chat_session cs on cs.version_uuid = v.uuid
  left join chat_log cl on cl.session_uuid = cs.uuid
group by
  p.name,
  cm.name,
  cm.uuid,
  (date (cs.created_at))
order by
  (date (cs.created_at)),
  p.name;"""
    )

    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DROP VIEW IF EXISTS chat_log_view")
    op.execute("DROP VIEW IF EXISTS chat_logs_count")
    op.execute("DROP VIEW IF EXISTS run_logs_count")
    op.execute("DROP VIEW IF EXISTS project_daily_run_log_metric")
    op.execute("DROP VIEW IF EXISTS deployment_run_log_view")
    op.execute("DROP VIEW IF EXISTS daily_chat_log_metric")
    
    op.drop_constraint('unit_project_uuid_fkey', 'unit', type_='foreignkey')
    op.alter_column('unit', 'project_uuid',
               existing_type=sa.Text(),
               type_=sa.UUID(),
               existing_nullable=False,
               postgresql_using='project_uuid::uuid')
    op.drop_constraint('tag_project_uuid_fkey', 'tag', type_='foreignkey')
    op.alter_column('tag', 'project_uuid',
               existing_type=sa.Text(),
               type_=sa.UUID(),
               existing_nullable=False,
               postgresql_using='project_uuid::uuid')
    op.drop_constraint('sample_input_project_uuid_fkey', 'sample_input', type_='foreignkey')
    op.alter_column('sample_input', 'project_uuid',
               existing_type=sa.Text(),
               type_=sa.UUID(),
               existing_nullable=False,
               postgresql_using='project_uuid::uuid')
    op.drop_constraint('run_log_project_uuid_fkey', 'run_log', type_='foreignkey')
    op.alter_column('run_log', 'project_uuid',
               existing_type=sa.Text(),
               type_=sa.UUID(),
               existing_nullable=False,
               postgresql_using='project_uuid::uuid')
    op.drop_constraint('project_changelog_project_uuid_fkey', 'project_changelog', type_='foreignkey')
    op.alter_column('project_changelog', 'project_uuid',
               existing_type=sa.Text(),
               type_=sa.UUID(),
               existing_nullable=False,
               postgresql_using='project_uuid::uuid')
    op.drop_constraint('llm_project_uuid_fkey', 'llm', type_='foreignkey')
    op.alter_column('llm', 'project_uuid',
               existing_type=sa.Text(),
               type_=sa.UUID(),
               existing_nullable=False,
               postgresql_using='project_uuid::uuid')
    op.drop_constraint('function_schema_project_uuid_fkey', 'function_schema', type_='foreignkey')
    op.alter_column('function_schema', 'project_uuid',
               existing_type=sa.Text(),
               type_=sa.UUID(),
               existing_nullable=False,
               postgresql_using='project_uuid::uuid')
    op.drop_constraint('function_model_project_uuid_fkey', 'function_model', type_='foreignkey')
    op.alter_column('function_model', 'project_uuid',
               existing_type=sa.Text(),
               type_=sa.UUID(),
               existing_nullable=False,
               postgresql_using='project_uuid::uuid')
    op.drop_constraint('eval_metric_project_uuid_fkey', 'eval_metric', type_='foreignkey')
    op.alter_column('eval_metric', 'project_uuid',
               existing_type=sa.Text(),
               type_=sa.UUID(),
               existing_nullable=False,
               postgresql_using='project_uuid::uuid')
    op.drop_constraint('dataset_project_uuid_fkey', 'dataset', type_='foreignkey')
    op.alter_column('dataset', 'project_uuid',
               existing_type=sa.Text(),
               type_=sa.UUID(),
               existing_nullable=False,
               postgresql_using='project_uuid::uuid')
    op.drop_constraint('chat_model_project_uuid_fkey', 'chat_model', type_='foreignkey')
    op.alter_column('chat_model', 'project_uuid',
               existing_type=sa.Text(),
               type_=sa.UUID(),
               existing_nullable=False,
               postgresql_using='project_uuid::uuid')
    op.drop_constraint('chat_log_project_uuid_fkey', 'chat_log', type_='foreignkey')
    op.alter_column('chat_log', 'project_uuid',
               existing_type=sa.Text(),
               type_=sa.UUID(),
               existing_nullable=False,
               postgresql_using='project_uuid::uuid')
    
    op.alter_column('project', 'uuid',
               existing_type=sa.Text(),
               type_=sa.UUID(),
               existing_nullable=False,
               postgresql_using='uuid::uuid',
               existing_server_default=sa.text('gen_random_uuid()'))
    
    op.create_foreign_key('unit_project_uuid_fkey', 'unit', 'project', ['project_uuid'], ['uuid'])
    op.create_foreign_key('tag_project_uuid_fkey', 'tag', 'project', ['project_uuid'], ['uuid'])
    op.create_foreign_key('sample_input_project_uuid_fkey', 'sample_input', 'project', ['project_uuid'], ['uuid'])
    op.create_foreign_key('run_log_project_uuid_fkey', 'run_log', 'project', ['project_uuid'], ['uuid'])
    op.create_foreign_key('project_changelog_project_uuid_fkey', 'project_changelog', 'project', ['project_uuid'], ['uuid'])
    op.create_foreign_key('llm_project_uuid_fkey', 'llm', 'project', ['project_uuid'], ['uuid'])
    op.create_foreign_key('function_schema_project_uuid_fkey', 'function_schema', 'project', ['project_uuid'], ['uuid'])
    op.create_foreign_key('function_model_project_uuid_fkey', 'function_model', 'project', ['project_uuid'], ['uuid'])
    op.create_foreign_key('eval_metric_project_uuid_fkey', 'eval_metric', 'project', ['project_uuid'], ['uuid'])
    op.create_foreign_key('dataset_project_uuid_fkey', 'dataset', 'project', ['project_uuid'], ['uuid'])
    op.create_foreign_key('chat_model_project_uuid_fkey', 'chat_model', 'project', ['project_uuid'], ['uuid'])
    op.create_foreign_key('chat_log_project_uuid_fkey', 'chat_log', 'project', ['project_uuid'], ['uuid'])
    
    op.execute(
        """create view
  public.chat_log_view as
select
  cl.project_uuid,
  cm.name as chat_model_name,
  cm.uuid as chat_model_uuid,
  cv.uuid as chat_model_version_uuid,
  cv.version as chat_model_version,
  um.created_at,
  um.session_uuid,
  cl.assistant_message_uuid,
  um.content as user_input,
  am.content as assistant_output,
  am.tool_calls,
  am.function_call,
  cl.prompt_tokens,
  cl.completion_tokens,
  cl.total_tokens,
  cl.latency,
  cl.cost,
  session.run_from_deployment
from
  chat_log cl
  left join chat_message um on cl.user_message_uuid = um.uuid
  left join chat_message am on cl.assistant_message_uuid = am.uuid
  join chat_session session on um.session_uuid = session.uuid
  join chat_model_version cv on session.version_uuid = cv.uuid
  join chat_model cm on cv.chat_model_uuid = cm.uuid;"""
    )
    op.execute(
        """create view
  public.chat_logs_count as
select
  p.uuid as project_uuid,
  count(cl.project_uuid) as chat_logs_count
from
  project p
  left join chat_log cl on p.uuid = cl.project_uuid
group by
  p.uuid;"""
    )
    op.execute(
        """create view
  public.run_logs_count as
select
  p.uuid as project_uuid,
  count(rl.version_uuid) as run_logs_count
from
  project p
  left join function_model pm on p.uuid = pm.project_uuid
  left join function_model_version pmv on pm.uuid = pmv.function_model_uuid
  left join run_log rl on pmv.uuid = rl.version_uuid
group by
  p.uuid;"""
    )
    op.execute(
        """create view
  public.project_daily_run_log_metric as
SELECT project_uuid,
  sum(cost::numeric) as total_cost,
  sum(latency) / count(*)::double precision / 1000::double precision as avg_latency,
  sum(total_tokens) as total_token_usage,
  count(*) as total_runs,
  date(created_at) as day,
  run_from_deployment
FROM run_log rl
GROUP BY run_from_deployment, (date(created_at)), project_uuid"""
    )
    op.execute(
        """create view
  public.deployment_run_log_view as
select
  FM.project_uuid,
  FM.name as function_model_name,
  FM.uuid as function_model_uuid,
  FMV.version as function_model_version,
  FMV.uuid as function_model_version_uuid,
  rl.uuid as run_log_uuid,
  rl.created_at,
  rl.inputs,
  rl.raw_output,
  rl.parsed_outputs,
  rl.run_from_deployment,
  rl.prompt_tokens,
  rl.completion_tokens,
  rl.total_tokens,
  rl.latency,
  rl.cost,
  rl.run_log_metadata,
  rl.function_call,
  rl.tool_calls
from
  run_log rl
  left join function_model_version FMV on FMV.uuid = rl.version_uuid
  left join function_model FM on FM.uuid = FMV.function_model_uuid
order by
  rl.created_at desc;"""
    )
    op.execute(
        """create view
  public.daily_chat_log_metric as
select
  p.name as project_name,
  cm.name as chat_model_name,
  cm.uuid as chat_model_uuid,
  date (cs.created_at) as day,
  sum(cl.cost::numeric) as total_cost,
  sum(cl.latency) / count(cl.*)::double precision / 1000::double precision as avg_latency,
  sum(cl.total_tokens) as total_token_usage,
  count(cs.*) as total_chat_sessions
from
  project p
  left join chat_model cm on cm.project_uuid = p.uuid
  left join chat_model_version v on v.chat_model_uuid = cm.uuid
  left join chat_session cs on cs.version_uuid = v.uuid
  left join chat_log cl on cl.session_uuid = cs.uuid
group by
  p.name,
  cm.name,
  cm.uuid,
  (date (cs.created_at))
order by
  (date (cs.created_at)),
  p.name;"""
    )

    
    # ### end Alembic commands ###
